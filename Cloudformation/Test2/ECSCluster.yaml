Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group
Parameters:

  SSHSecurityGroup:
    Description: SSH Security Group
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    Default: 'testYarema'

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String


  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number

  LoadBalancer:
    Description: Load Balancer name
    Type: String

  VPC:
    Description: Choose which VPC this ECS cluster should be deployed to
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id

  # These are the latest ECS optimized AMIs as of Feb 2018:
  #
  #   amzn-ami-2017.09.h-amazon-ecs-optimized
  #   ECS agent:    1.17.1
  #   Docker:       17.09.1-ce
  #   ecs-init:     1.17.1-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)
Mappings:

  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-5253c32d
    us-east-2:
      AMIID: ami-956e52f0
    us-west-1:
      AMIID: ami-6b81980b
    us-west-2:
      AMIID: ami-3622cf51
    eu-west-1:
      AMIID: ami-c91624b0
    eu-central-1:
      AMIID: ami-10e6c8fb
    ap-northeast-1:
      AMIID: ami-f3f8098c
    ap-southeast-1:
      AMIID: ami-b75a6acb
    ap-southeast-2:
      AMIID: ami-bc04d5de

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      HealthCheckGracePeriod: 30
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
#      LoadBalancerNames:                      #!!!!
#        - !Ref LoadBalancer
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ECS host
          PropagateAtLaunch: true
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 2
        MaxBatchSize: 2
        PauseTime: PT20M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
      InstanceType: !Ref InstanceType
      KeyName: !Ref 'KeyName'
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref SecurityGroup
        - !Ref SSHSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash -xe
            yum -y --security update
            service docker restart
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action:
                 - 'ecs:CreateCluster'
                 - 'ecs:DeregisterContainerInstance'
                 - 'ecs:DiscoverPollEndpoint'
                 - 'ecs:Poll'
                 - 'ecs:RegisterContainerInstance'
                 - 'ecs:StartTelemetrySession'
                 - 'ecs:Submit*'
                 - 'logs:CreateLogStream'
                 - 'logs:PutLogEvents'
                 - 'ecr:BatchCheckLayerAvailability'
                 - 'ecr:BatchGetImage'
                 - 'ecr:GetDownloadUrlForLayer'
                 - 'ecr:GetAuthorizationToken'
                 - 'ssm:DescribeAssociation'
                 - 'ssm:GetDeployablePatchSnapshotForInstance'
                 - 'ssm:GetDocument'
                 - 'ssm:GetManifest'
                 - 'ssm:GetParameters'
                 - 'ssm:ListAssociations'
                 - 'ssm:ListInstanceAssociations'
                 - 'ssm:PutInventory'
                 - 'ssm:PutComplianceItems'
                 - 'ssm:PutConfigurePackageResult'
                 - 'ssm:UpdateAssociationStatus'
                 - 'ssm:UpdateInstanceAssociationStatus'
                 - 'ssm:UpdateInstanceInformation'
                 - 'ec2messages:AcknowledgeMessage'
                 - 'ec2messages:DeleteMessage'
                 - 'ec2messages:FailMessage'
                 - 'ec2messages:GetEndpoint'
                 - 'ec2messages:GetMessages'
                 - 'ec2messages:SendReply'
                 - 'cloudwatch:PutMetricData'
                 - 'ec2:DescribeInstanceStatus'
                 - 'ds:CreateComputer'
                 - 'ds:DescribeDirectories'
                 - 'logs:CreateLogGroup'
                 - 'logs:CreateLogStream'
                 - 'logs:DescribeLogGroups'
                 - 'logs:DescribeLogStreams'
                 - 'logs:PutLogEvents'
                 - 's3:PutObject'
                 - 's3:GetObject'
                 - 's3:AbortMultipartUpload'
                 - 's3:ListMultipartUploadParts'
                 - 's3:ListBucket'
                 - 's3:ListBucketMultipartUploads'
                Resource: '*'

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSServiceAutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - application-autoscaling.amazonaws.com
            Action:
            - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - 'application-autoscaling:*'
                - 'cloudwatch:DescribeAlarms'
                - 'cloudwatch:PutMetricAlarm'
                - 'ecs:DescribeServices'
                - 'ecs:UpdateService'
                Resource: '*'

Outputs:

  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  ECSServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSServiceAutoScalingRole.Arn

  ECSAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup