---
AWSTemplateFormatVersion: 2010-09-09
Description: Create a ecs cluster for Django Application

Parameters:
  MasterStack:
    Type: String

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: choose which VPC the application load balancer should be deployed to

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: choose which subnets the Application Load Balancer should be deployed to

  ECSInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]
    ConstraintDescription: please choose a valid instance type

  ECSAsgMinSize:
    Type: Number
    Default: '1'
    Description: minimum size of ECS Auto Scaling Group

  ECSAsgMaxSize:
    Type: Number
    Default: '1'
    Description: maximum size of ECS Auto Scaling Group

  ECSDesiredCapacity:
    Type: Number
    Default: '1'
    Description: desired capacity size of ECS Auto Scaling Group

  ECSServiceImage:
    Type: String
    Default: hilti-django
    Description: must select a valid ecs repository
    
  ECSServicePort:
    Type: Number
    Default: '8000'
    MinValue: '0'
    MaxValue: '65535'
    Description: must select a valid expose port for application inside docker container

  ECSServiceCPULimit:
    Type: Number
    Default: '200'
    MinValue: '100'
    MaxValue: '1000'
    Description: container service cpu use

  ECSServiceMemoryLimit:
    Type: Number
    Default: '256'
    MinValue: '128'
    MaxValue: '1024'
    Description: container service memory use (hard limit)

  StoreLogsDays:
    Type: Number
    Default: 1
    MinValue: 1
    Description: how many days to store logs in CloudWatch

  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: HiltiHidamo

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VpcId
          - Subnets
      - Label:
          default: ECS
        Parameters:
          - ECSInstanceType
          - ECSAsgMinSize
          - ECSAsgMaxSize
      - Label:
          default: Other
        Parameters:
          - KeyPair
          - StoreLogsDays

Mappings:
  AWSRegionToAMI:
    eu-west-1:
      AMI: ami-7b244e08
    eu-central-1:
      AMI: ami-721aec1d

Resources:
  CloudWatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${MasterStack}'
      RetentionInDays: !Ref StoreLogsDays

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MasterStack}-ec2-sg'
      GroupDescription: allow access to ec2 instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      #   Check http://checkip.amazonaws.com
          # home
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 77.123.187.239/32
          # office
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 95.47.136.88/32
          # ecs services
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 61000
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${MasterStack}-ec2-sg'

  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MasterStack}-elb-sg'
      GroupDescription: allow http connections
      VpcId: !Ref VpcId
      SecurityGroupIngress:
          # home
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:  77.123.187.239/32
          # GlobalLogic Naukova Streat
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 95.47.136.88/32
          # GlobalLogic Sheptytskykh Streat
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 195.234.74.0/24
      Tags:
        - Key: Name
          Value: !Sub '${MasterStack}-elb-sg'

  #####
  #
  # IAM Roles
  #
  #####
  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  ECSInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "AmazonEC2ContainerServiceforEC2Role"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:ListContainerInstances"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ECSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  ECSAutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  #####
  #
  # Application ELB
  #
  #####
  ECSElasticlasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${MasterStack}-elb'
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref Subnets
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ECSElasticLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ECSElasticlasticLoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSElasticLoadBalancingTargetGroup
    DependsOn: ECSServiceRole

  ECSLoadBalancerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSElasticLoadBalancingTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref ECSElasticLoadBalancerListener
      Priority: 1
    DependsOn: ECSElasticLoadBalancerListener

  ECSElasticLoadBalancingTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${MasterStack}'
      VpcId: !Ref VpcId
      Port: '80'
      #Matcher:
      #  HttpCode: '200-299'
      Protocol: HTTP
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 10
      HealthCheckIntervalSeconds: 120
      HealthCheckTimeoutSeconds: 60
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 30
        - Key: deregistration_delay.timeout_seconds
          Value: 30
    DependsOn: ECSElasticlasticLoadBalancer

  #####
  #
  # LaunchConfiguration and Autoscaling
  #
  #####
  ECSLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref ECSInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ECSInstanceProfile
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref ECSSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y --security update
          service docker restart
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  ECSInstanceAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: !Ref ECSAsgMinSize
      MaxSize: !Ref ECSAsgMaxSize
      VPCZoneIdentifier: !Ref Subnets
      DesiredCapacity: !Ref ECSDesiredCapacity
      LaunchConfigurationName: !Ref ECSLaunchConfig
      HealthCheckGracePeriod: 50
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: !Sub '${MasterStack}'
          PropagateAtLaunch: 'true'

  #####
  #
  # Application Services
  #
  #####
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${MasterStack}'
 
  # Application Services
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub '${MasterStack}-django'
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref ECSDesiredCapacity
      LoadBalancers:
        - ContainerName: !Sub '${MasterStack}-django'
          TargetGroupArn: !Ref ECSElasticLoadBalancingTargetGroup
          ContainerPort: !Ref ECSServicePort
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref ECSTaskDefinition
    DependsOn: ECSElasticLoadBalancerListener

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${MasterStack}-django'
      ContainerDefinitions:
        - Name: !Sub '${MasterStack}-django'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ECSServiceImage}
          Hostname: django
          Cpu: !Ref ECSServiceCPULimit
          Memory: !Ref ECSServiceMemoryLimit
          Essential: true
          PortMappings:
            - HostPort: 0
              ContainerPort: !Ref ECSServicePort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: django
          MountPoints:
            - SourceVolume: hidamo-sqlite
              ContainerPath: /opt/django/db.sqlite3
      Volumes:
        - Name: hidamo-sqlite
          Host:
            SourcePath: /home/ec2-user/django/db.sqlite3

Outputs:
  ProxyLoadBalancer:
    Value: !GetAtt ECSElasticlasticLoadBalancer.DNSName

  ECSCluster:
    Value: !Ref ECSCluster

  ECSServiceRole:
    Value: !GetAtt ECSServiceRole.Arn

  CloudWatchLogGroup:
    Value: !Ref CloudWatchLogGroup